melt_dt$label<-as.character(melt_dt$value)
melt_dt$label[which(melt_dt$variable=='TN' | melt_dt$variable=='FN')]=''
nums<-vector()
for (i in 1:length(unique(melt_dt$method))){
num_i<-melt_dt[which(melt_dt$method==melt_dt$method[i]),]
uni_var<-levels(factor(melt_dt$variable))
re_order<-match(num_i$variable, uni_var)
num_i<-num_i[re_order,]
l_y<-c(rep(0,length(uni_var)))
for (j in length(uni_var):1) {
if(j==length(uni_var)){
l_y[j]=num_i$value[j]/2
}else{
l_y_j=num_i$value[j]/2 + sum(num_i$value[c((j+1):length(uni_var))])
l_y[j]=l_y_j
}
}
num_i$l_y<-l_y
nums<-rbind(nums,num_i)
}
#library(ggrepel)
ggbarplot(nums, "method", "value", group = "variable", color = "variable",fill="variable",
platette = c('#5494cc','#e18283','#0d898a','#f9cc52') #label=as.character(melt_dt$value)),
) +geom_vline(xintercept = 10.5, linetype=2, show.legend=FALSE)+ scale_x_discrete(limits=c('FG_DDA_st5600_ens', 'MQ_DDA_st5600_ens',
'FG_DDA_st6600_ens','MQ_DDA_st6600_ens',
'FG_DDA_qe_ens','MQ_DDA_qe_ens',
'FG_DDA_tims_ens','MQ_DDA_tims_ens',
'DIANN_DIA_tims_ens', 'spt_DIA_tims_ens',
'FG_DDA_st5600', 'MQ_DDA_st5600', 'FG_DDA_st6600', 'MQ_DDA_st6600',
'FG_DDA_qe','MQ_DDA_qe','FG_DDA_tims','MQ_DDA_tims',
'DIANN_DIA_tims','spt_DIA_tims'
)) + geom_text(aes(y=l_y, label=label)) +
theme(axis.title.y = element_blank())+ theme(axis.line.y = element_blank())+ coord_flip()
write.table(nums, paste0(save_fold, 'Figure5D.csv'), col.names = T, row.names = F)
sessionInfo()
.libPaths()
packageVersion("readxl")
packageVersion("ggplot2")
packageVersion("reshape2")
packageVersion("ggpubr")
packageVersion("cowplot")
packageVersion("openxlsx")
packageVersion("ggalluvial")
packageVersion("ggsci")
packageVersion("ggrepel")
packageVersion("ggthemes")
packageVersion("ComplexHeatmap")
packageVersion("gridExtra")
packageVersion("UpSetR")
packageVersion("grid")
packageVersion("pROC")
packageVersion("ggradar")
packageVersion("NormalyzerDE")
packageVersion("limma")
packageVersion("ROTS")
packageVersion("MSnbase")
packageVersion("edgeR")
packageVersion("proDA")
packageVersion("DEqMS")
packageVersion("plgem")
packageVersion("DEP")
packageVersion("MSstats")
packageVersion("samr")
packageVersion("mice")
packageVersion("missForest")
packageVersion("reshape2")
packageVersion("dplyr")
packageVersion("tidyverse")
packageVersion("matrixStats")
packageVersion("rrcovNA")
packageVersion("aggregation")
packageVersion("iq")
devtools::build(path = "E:/OpDEA")
install.packages(
pkgs = 'E:/OpDEA/OpDEA_0.0.0.9000.tar.gz',
lib = .libPaths()[length(.libPaths())],
repos = NULL, # 这个参数一定要的
dependencies = T
)
OpDEA::run_app()
devtools::build(path = "E:/OpDEA")
install.packages(
pkgs = 'E:/OpDEA/OpDEA_0.0.0.9000.tar.gz',
lib = .libPaths()[length(.libPaths())],
repos = NULL, # 这个参数一定要的
dependencies = T
)
OpDEA::run_app()
OpDEA::run_app()
debugSource("E:/proteomics/maus2/submission_NC/revision/figures_mean/Figure2/test.R")
model <- lm(score ~ DEA*Imput, data = rank_frag_DDA)
anova_res<-anova(model)
View(anova_res)
model <- lm(score ~ DEA*normalization, data = rank_frag_DDA); anova_res<-anova(model)
View(anova_res)
model <- lm(score ~ DEA*Matrix, data = rank_frag_DDA); anova_res<-anova(model)
View(model)
View(anova_res)
model <- lm(score ~ DEA*Matrix, data = rank_frag_DDA); anova_res<-anova(model); lm_res<-summary(model)$coef
View(lm_res)
model <- lm(score ~ Matrix*normalization*Imput, data = rank_frag_DDA); anova_res<-anova(model); lm_res<-summary(model)$coef
View(lm_res)
View(anova_res)
############################
####
#### Figure3 compares different procedures in workflows
####
#############################
######################## top ranking workflows
data_fold<-'D:/data/benchmark/benchmark_res/combined_res_new3_mean/'
save_fold<-'E:/proteomics/maus2/submission_NC/revision/figures_mean/Figure3/'
library(readxl)
rank_frag_DDA<-read_excel(paste0(data_fold,'ranks_all_', 'FragPipe', '_', 'DDA','.xlsx'), sheet = 'ranking_all')
rank_mq_DDA<-read_excel(paste0(data_fold,'ranks_all_', 'Maxquant', '_', 'DDA','.xlsx'), sheet = 'ranking_all')
rank_frag_TMT<-read_excel(paste0(data_fold,'ranks_all_', 'FragPipe', '_', 'TMT','.xlsx'), sheet = 'ranking_all')
rank_mq_TMT<-read_excel(paste0(data_fold,'ranks_all_', 'Maxquant', '_', 'TMT','.xlsx'), sheet = 'ranking_all')
rank_diann_DIA<-read_excel(paste0(data_fold,'ranks_all_', 'DIANN', '_', 'DIA','.xlsx'), sheet = 'ranking_all')
rank_spt_DIA<-read_excel(paste0(data_fold,'ranks_all_', 'spt', '_', 'DIA','.xlsx'), sheet = 'ranking_all')
rank_frag_DDA<-rank_frag_DDA[order(rank_frag_DDA$avg_rank_mean),]
rank_mq_DDA<-rank_mq_DDA[order(rank_mq_DDA$avg_rank_mean),]
rank_frag_TMT<-rank_frag_TMT[order(rank_frag_TMT$avg_rank_mean),]
rank_mq_TMT<-rank_mq_TMT[order(rank_mq_TMT$avg_rank_mean),]
rank_diann_DIA<-rank_diann_DIA[order(rank_diann_DIA$avg_rank_mean),]
rank_spt_DIA<-rank_spt_DIA[order(rank_spt_DIA$avg_rank_mean),]
#topwfs<-data.frame()
plot_topwf<-function(i, cols){
#for (i in 1:length(platforms)) {
rank_res<-read_excel(paste0(data_fold,'ranks_all_', platforms[i], '_', acqs[i],'.xlsx'), sheet = 'ranking_all')
rank_res<-rank_res[order(rank_res$avg_rank_mean),]
rank_res$exact_rank<-c(1:length(rank_res$workflow))
rank_res<-rank_res[which(rank_res$DEA!='MSstats'),]
uni_matrix<-unique(rank_res$Matrix)
top_ranks<-data.frame()
for (j in 1:length(uni_matrix)) {
idx_mat<-which(rank_res$Matrix==uni_matrix[j])
rank_idx_mat<-rank_res[idx_mat,]
rank_idx_mat<-rank_idx_mat[order(rank_idx_mat$avg_rank_mean),]
rank_idx_mat$setting<-setting[i]
top_rank<-rank_idx_mat[1:N,]
top_rank$rank<-paste0('top',c(1:N))
top_rank$Matrix<-gsub('intensity','reporter',top_rank$Matrix)
top_rank$Imput<-gsub('blank','none',top_rank$Imput)
top_rank$normalization<-gsub('blank','none',top_rank$normalization)
top_rank$label<-paste0(top_rank$DEA,'|',top_rank$normalization,'|',top_rank$Imput,
'(',as.character(paste0(top_rank$exact_rank)),')')
#topwfs<-rbind(topwfs, top_rank)
top_ranks<-rbind(top_ranks, top_rank)
}
library(ggrepel)
p8<-ggplot(top_ranks, aes(x=mean_pauc001, y=mean_gmean005, color=Matrix)) +
geom_point(alpha=1, size=2) +
theme_bw(base_size = 12) +
xlab("pAUC(0.01)") +
ylab("G-mean") +#facet_wrap(~ setting)+
labs(title = setting[i])+scale_colour_manual(values = c(cols))+
geom_label_repel(data = top_ranks, aes(label = label),
size = 4,#box.padding = unit(0.5, "lines"),
label.size = NA,
point.padding = unit(0.8, "lines"),
segment.color = "black",force=100,
show.legend = FALSE, max.overlaps = 1000)+
theme(legend.title=element_text(size=12),legend.text=element_text(size=12), legend.position = "top")+
guides(color=guide_legend(nrow=1), shape=guide_legend(nrow=3))
p8
return(p8)
}
data_fold<-'D:/data/benchmark/benchmark_res/combined_res_new3_mean/'
save_fold<-'E:/proteomics/maus2/submission_NC/revision/figures_mean/Figure3/'
platforms<-c('Maxquant', 'Fragpipe', 'Fragpipe', 'Maxquant', 'DIANN', 'spt')
acqs<-c('TMT', 'TMT', 'DDA', 'DDA', 'DIA', 'DIA')
setting<-c('MQ_TMT','FG_TMT','FG_DDA','MQ_DDA','DIANN_DIA','spt_DIA')
DEA_sym<-c(1:10)
norm_sym<-LETTERS
imp_sym<-letters
matrix_sym<-c('alpha', 'beta', 'gamma', 'delta', 'epsilon')
N=2
col=c("#1f78b4","#33a02c","#fb9a99","orange","black","purple","green","darkgray","#a6cee3","red")
p81<-plot_topwf(1, col[7])
p82<-plot_topwf(2, col[8:10])
p83<-plot_topwf(3, col[c(1:5)])
p84<-plot_topwf(4, col[c(1:5)])
p85<-plot_topwf(5, col[c(2,3,6,5)])
p86<-plot_topwf(6, col[c(2,3,6,5)])
p81$data
############################
####
#### Figure3 compares different procedures in workflows
####
#############################
######################## top ranking workflows
data_fold<-'D:/data/benchmark/benchmark_res/combined_res_new3_mean/'
save_fold<-'E:/proteomics/maus2/submission_NC/revision/figures_mean/Figure3/'
library(readxl)
rank_frag_DDA<-read_excel(paste0(data_fold,'ranks_all_', 'FragPipe', '_', 'DDA','.xlsx'), sheet = 'ranking_all')
rank_mq_DDA<-read_excel(paste0(data_fold,'ranks_all_', 'Maxquant', '_', 'DDA','.xlsx'), sheet = 'ranking_all')
rank_frag_TMT<-read_excel(paste0(data_fold,'ranks_all_', 'FragPipe', '_', 'TMT','.xlsx'), sheet = 'ranking_all')
rank_mq_TMT<-read_excel(paste0(data_fold,'ranks_all_', 'Maxquant', '_', 'TMT','.xlsx'), sheet = 'ranking_all')
rank_diann_DIA<-read_excel(paste0(data_fold,'ranks_all_', 'DIANN', '_', 'DIA','.xlsx'), sheet = 'ranking_all')
rank_spt_DIA<-read_excel(paste0(data_fold,'ranks_all_', 'spt', '_', 'DIA','.xlsx'), sheet = 'ranking_all')
rank_frag_DDA<-rank_frag_DDA[order(rank_frag_DDA$avg_rank_mean),]
rank_mq_DDA<-rank_mq_DDA[order(rank_mq_DDA$avg_rank_mean),]
rank_frag_TMT<-rank_frag_TMT[order(rank_frag_TMT$avg_rank_mean),]
rank_mq_TMT<-rank_mq_TMT[order(rank_mq_TMT$avg_rank_mean),]
rank_diann_DIA<-rank_diann_DIA[order(rank_diann_DIA$avg_rank_mean),]
rank_spt_DIA<-rank_spt_DIA[order(rank_spt_DIA$avg_rank_mean),]
#topwfs<-data.frame()
plot_topwf<-function(i, cols){
#for (i in 1:length(platforms)) {
rank_res<-read_excel(paste0(data_fold,'ranks_all_', platforms[i], '_', acqs[i],'.xlsx'), sheet = 'ranking_all')
rank_res<-rank_res[order(rank_res$avg_rank_mean),]
rank_res$exact_rank<-c(1:length(rank_res$workflow))
rank_res<-rank_res[which(rank_res$DEA!='MSstats'),]
uni_matrix<-unique(rank_res$Matrix)
top_ranks<-data.frame()
for (j in 1:length(uni_matrix)) {
idx_mat<-which(rank_res$Matrix==uni_matrix[j])
rank_idx_mat<-rank_res[idx_mat,]
rank_idx_mat<-rank_idx_mat[order(rank_idx_mat$avg_rank_mean),]
rank_idx_mat$setting<-setting[i]
top_rank<-rank_idx_mat[1:N,]
top_rank$rank<-paste0('top',c(1:N))
top_rank$Matrix<-gsub('intensity','reporter',top_rank$Matrix)
top_rank$Imput<-gsub('blank','none',top_rank$Imput)
top_rank$normalization<-gsub('blank','none',top_rank$normalization)
top_rank$label<-paste0(top_rank$DEA,'|',top_rank$normalization,'|',top_rank$Imput,
'(',as.character(paste0(top_rank$exact_rank)),')')
#topwfs<-rbind(topwfs, top_rank)
top_ranks<-rbind(top_ranks, top_rank)
}
library(ggrepel)
p8<-ggplot(top_ranks, aes(x=mean_pauc001, y=mean_gmean005, color=Matrix)) +
geom_point(alpha=1, size=2) +
theme_bw(base_size = 12) +
xlab("pAUC(0.01)") +
ylab("G-mean") +#facet_wrap(~ setting)+
labs(title = setting[i])+scale_colour_manual(values = c(cols))+
geom_label_repel(data = top_ranks, aes(label = label),
size = 4,#box.padding = unit(0.5, "lines"),
label.size = NA,
point.padding = unit(0.8, "lines"),
segment.color = "black",force=100,
show.legend = FALSE, max.overlaps = 1000)+
theme(legend.title=element_text(size=12),legend.text=element_text(size=12), legend.position = "top")+
guides(color=guide_legend(nrow=1), shape=guide_legend(nrow=3))
p8
return(list(p=p8, tops=top_ranks))
}
data_fold<-'D:/data/benchmark/benchmark_res/combined_res_new3_mean/'
save_fold<-'E:/proteomics/maus2/submission_NC/revision/figures_mean/Figure3/'
platforms<-c('Maxquant', 'Fragpipe', 'Fragpipe', 'Maxquant', 'DIANN', 'spt')
acqs<-c('TMT', 'TMT', 'DDA', 'DDA', 'DIA', 'DIA')
setting<-c('MQ_TMT','FG_TMT','FG_DDA','MQ_DDA','DIANN_DIA','spt_DIA')
DEA_sym<-c(1:10)
norm_sym<-LETTERS
imp_sym<-letters
matrix_sym<-c('alpha', 'beta', 'gamma', 'delta', 'epsilon')
N=2
col=c("#1f78b4","#33a02c","#fb9a99","orange","black","purple","green","darkgray","#a6cee3","red")
p81<-plot_topwf(1, col[7])
p82<-plot_topwf(2, col[8:10])
p83<-plot_topwf(3, col[c(1:5)])
p84<-plot_topwf(4, col[c(1:5)])
p85<-plot_topwf(5, col[c(2,3,6,5)])
p86<-plot_topwf(6, col[c(2,3,6,5)])
p81$tops
a=p81$tops
View(a)
a=p83$tops
View(a)
top1_dlfq<-read.table('D:/data/benchmark/benchmark_res/DDA/FragPipe/HYEtims735_LFQ/HYEtims735_LFQ_ROTS_FragPipe_dlfq_SeqKNN_.csv', sep = ',', header = T)
View(top1_dlfq)
top1_dlfq<-read.table('D:/data/benchmark/benchmark_res/DDA/FragPipe/HYEtims735_LFQ/HYEtims735_LFQ_ROTS_FragPipe_dlfq_SeqKNN_.csv', sep = ',', header = T)
top1_lfq<-read.table('D:/data/benchmark/benchmark_res/DDA/FragPipe/HYEtims735_LFQ/HYEtims735_LFQ_limma_FragPipe_LFQ_MinDet_.csv', sep = ',', header = T)
top1_top0<-read.table('D:/data/benchmark/benchmark_res/DDA/FragPipe/HYEtims735_LFQ/HYEtims735_LFQ_limma_FragPipe_top0_missForest_.csv', sep = ',', header = T)
top1_top3<-read.table('D:/data/benchmark/benchmark_res/DDA/FragPipe/HYEtims735_LFQ/HYEtims735_LFQ_limma_FragPipe_top3_missForest_.csv', sep = ',', header = T)
top1_count<-read.table('D:/data/benchmark/benchmark_res/DDA/FragPipe/HYEtims735_LFQ/HYEtims735_LFQ_plgem_FragPipe_count__.csv', sep = ',', header = T)
top1<-top1_dlfq
top2<-top1_dlfq<-read.table('D:/data/benchmark/benchmark_res/DDA/FragPipe/HYEtims735_LFQ/HYEtims735_LFQ_DEqMS_FragPipe_dlfq_missForest_.csv', sep = ',', header = T)
top3<-read.table('D:/data/benchmark/benchmark_res/DDA/FragPipe/HYEtims735_LFQ/HYEtims735_LFQ_limma_FragPipe_dlfq_missForest_.csv', sep = ',', header = T)
top4<-read.table('D:/data/benchmark/benchmark_res/DDA/FragPipe/HYEtims735_LFQ/HYEtims735_LFQ_ROTS_FragPipe_dlfq_SeqKNN_Rlr.csv', sep = ',', header = T)
top5<-read.table('D:/data/benchmark/benchmark_res/DDA/FragPipe/HYEtims735_LFQ/HYEtims735_LFQ_proDA_FragPipe_dlfq_Impseq_.csv', sep = ',', header = T)
library(ggVennDiagram)
ggVennDiagram(multi_quant,
category.names = c("dlfq","LFQ","top0","top3","count"))
multi_quant<-list(dlfq=top1_dlfq$protein, LFQ=top1_lfq$protein,
top0=top1_top0$protein, top3=top1_top3$protein,
count=top1_count$protein)
library(ggVennDiagram)
ggVennDiagram(multi_quant,
category.names = c("dlfq","LFQ","top0","top3","count"))
multi_quant<-list(dlfq=top1_dlfq$protein[which(abs(top1_dlfq$logFC)>=log2(1.5) &top1_dlfq$adj.P.Val<=0.05)],
LFQ=top1_lfq$protein[which(abs(top1_lfq$logFC)>=log2(1.5) &top1_lfq$adj.P.Val<=0.05)],
top0=top1_top0$protein[which(abs(top1_top0$logFC)>=log2(1.5) &top1_top0$adj.P.Val<=0.05)],
top3=top1_top3$protein[which(abs(top1_top3$logFC)>=log2(1.5) &top1_top3$adj.P.Val<=0.05)],
count=top1_count$protein[which(abs(top1_count$logFC)>=log2(1.5) &top1_count$adj.P.Val<=0.05)])
library(ggVennDiagram)
ggVennDiagram(multi_quant,
category.names = c("dlfq","LFQ","top0","top3","count"))
View(top1_dlfq)
View(top1_top0)
multi_quant<-list(dlfq=top1_dlfq$protein[which(abs(top1_dlfq$logFC)>=log2(1.5) &top1_dlfq$adj.P.Val<=0.05)],
LFQ=top1_lfq$protein[which(abs(top1_lfq$logFC)>=log2(1.5) &top1_lfq$adj.P.Val<=0.05)],
top0=top1_top0$protein[which(abs(top1_top0$logFC)>=log2(1.5) &top1_top0$adj.P.Val<=0.05)],
top3=top1_top3$protein[which(abs(top1_top3$logFC)>=log2(1.5) &top1_top3$adj.P.Val<=0.05)],
count=top1_count$protein[which(abs(top1_count$logFC)>=log2(1.5) &top1_count$adj.P.Val<=0.05)])
multi_quant<-list(dlfq=top1_dlfq$protein[which(abs(top1_dlfq$logFC)>=log2(1.5) & top1_dlfq$adj.P.Val<=0.05)],
LFQ=top1_lfq$protein[which(abs(top1_lfq$logFC)>=log2(1.5) & top1_lfq$adj.P.Val<=0.05)],
top0=top1_top0$protein[which(abs(top1_top0$logFC)>=log2(1.5) & top1_top0$adj.P.Val<=0.05)],
top3=top1_top3$protein[which(abs(top1_top3$logFC)>=log2(1.5) & top1_top3$adj.P.Val<=0.05)],
count=top1_count$protein[which(abs(top1_count$logFC)>=log2(1.5) & top1_count$adj.P.Val<=0.05)])
View(top1_top3)
top1_dlfq$protein[which(abs(top1_dlfq$logFC)>=log2(1.5) & top1_dlfq$adj.P.Val<=0.05)]
top1_lfq$protein[which(abs(top1_lfq$logFC)>=log2(1.5) & top1_lfq$adj.P.Val<=0.05)]
top1_lfq$logFC
top1_lfq$adj.P.Val<=0.05
multi_quant<-list(dlfq=top1_dlfq$protein[which(abs(top1_dlfq$logFC)>=log2(1.5) & top1_dlfq$adj.P.Val<=0.05)],
LFQ=top1_lfq$protein[which(abs(top1_lfq$logFC)>=log2(1.5) & top1_lfq$adj.pvalue<=0.05)],
top0=top1_top0$protein[which(abs(top1_top0$logFC)>=log2(1.5) & top1_top0$adj.pvalue<=0.05)],
top3=top1_top3$protein[which(abs(top1_top3$logFC)>=log2(1.5) & top1_top3$adj.pvalue<=0.05)],
count=top1_count$protein[which(abs(top1_count$logFC)>=log2(1.5) & top1_count$adj.pvalue<=0.05)])
library(ggVennDiagram)
ggVennDiagram(multi_quant,
category.names = c("dlfq","LFQ","top0","top3","count"))
upset(multi_quant, nsets = 5, nintersects = 30, mb.ratio = c(0.5, 0.5),
order.by = c("freq", "degree"), decreasing = c(TRUE,FALSE))
library(UpSetR)
upset(multi_quant, nsets = 5, nintersects = 30, mb.ratio = c(0.5, 0.5),
order.by = c("freq", "degree"), decreasing = c(TRUE,FALSE))
library(ComplexHeatmap)
UpSet(make_comb_mat(multi_quant))
all_DEPs<-union(multi_quant$dlfq,union(multi_quant$LFQ,union(multi_quant$top0,union(multi_quant$top3,multi_quant$count))))
library(UpSetR)
all_DEPs<-unique(union(multi_quant$dlfq,union(multi_quant$LFQ,union(multi_quant$top0,union(multi_quant$top3,multi_quant$count)))))
DEPs$dlfq<-rep(0, length(all_DEPs))
DEPs<-data.frame(dlfq=rep(0, length(all_DEPs)))
DEPs$dlfq[match(multi_quant$dlfq, all_DEPs)]=1
View(DEPs)
all_DEPs<-unique(union(multi_quant$dlfq,union(multi_quant$LFQ,union(multi_quant$top0,union(multi_quant$top3,multi_quant$count)))))
DEPs<-data.frame(dlfq=rep(0, length(all_DEPs)))
DEPs$dlfq[match(multi_quant$dlfq, all_DEPs)]=1
DEPs$LFQ=rep(0, length(all_DEPs))
DEPs$LFQ[match(multi_quant$LFQ, all_DEPs)]=1
DEPs$top0=rep(0, length(all_DEPs))
DEPs$top0[match(multi_quant$top0, all_DEPs)]=1
DEPs$top3=rep(0, length(all_DEPs))
DEPs$top3[match(multi_quant$top3, all_DEPs)]=1
DEPs$count=rep(0, length(all_DEPs))
DEPs$count[match(multi_quant$count, all_DEPs)]=1
library(UpSetR)
all_DEPs<-unique(union(multi_quant$dlfq,union(multi_quant$LFQ,union(multi_quant$top0,union(multi_quant$top3,multi_quant$count)))))
DEPs<-data.frame(dlfq=rep(0, length(all_DEPs)))
DEPs$dlfq[match(multi_quant$dlfq, all_DEPs)]=1
DEPs$LFQ=rep(0, length(all_DEPs))
DEPs$LFQ[match(multi_quant$LFQ, all_DEPs)]=1
DEPs$top0=rep(0, length(all_DEPs))
DEPs$top0[match(multi_quant$top0, all_DEPs)]=1
DEPs$top3=rep(0, length(all_DEPs))
DEPs$top3[match(multi_quant$top3, all_DEPs)]=1
DEPs$count=rep(0, length(all_DEPs))
DEPs$count[match(multi_quant$count, all_DEPs)]=1
UpSetR::upset(DEPs,
sets = c("dlfq", "LFQ", "top0", "top3", "count"),
order.by="freq", matrix.color="black", point.size=3,
sets.bar.color=c("#15d08a","#f2ca01","#a45ee3","#c3642c",
"#f078b4"),mb.ratio=c(0.7, 0.3), text.scale = 1.5,
number.angles =-45)
View(top1_count)
T_DEPs<-unique(union(top1_dlfq$protein[which(top1_dlfq$label==1)],
union(top1_lfq$protein[which(top1_lfq$label==1)],
union(top1_top0$protein[which(top1_top0$label==1)],
union(top1_top3$protein[which(top1_top3$label==1)],
top1_count$protein[which(top1_count$label==1)])))))
T_DEPs<-unique(union(top1_dlfq$protein[which(top1_dlfq$label==1)],
union(top1_lfq$protein[which(top1_lfq$label==1)],
union(top1_top0$protein[which(top1_top0$label==1)],
union(top1_top3$protein[which(top1_top3$label==1)],
top1_count$protein[which(top1_count$label==1)])))))
all_DEPs<-unique(union(multi_quant$dlfq,union(multi_quant$LFQ,union(multi_quant$top0,union(multi_quant$top3,multi_quant$count)))))
all_DEPs<-unique(c(T_DEPs, all_DEPs))
DEPs<-data.frame(dlfq=rep(0, length(all_DEPs)))
DEPs$dlfq[match(multi_quant$dlfq, all_DEPs)]=1
DEPs$LFQ=rep(0, length(all_DEPs))
DEPs$LFQ[match(multi_quant$LFQ, all_DEPs)]=1
DEPs$top0=rep(0, length(all_DEPs))
DEPs$top0[match(multi_quant$top0, all_DEPs)]=1
DEPs$top3=rep(0, length(all_DEPs))
DEPs$top3[match(multi_quant$top3, all_DEPs)]=1
DEPs$count=rep(0, length(all_DEPs))
DEPs$count[match(multi_quant$count, all_DEPs)]=1
library(UpSetR)
T_DEPs<-unique(union(top1_dlfq$protein[which(top1_dlfq$label==1)],
union(top1_lfq$protein[which(top1_lfq$label==1)],
union(top1_top0$protein[which(top1_top0$label==1)],
union(top1_top3$protein[which(top1_top3$label==1)],
top1_count$protein[which(top1_count$label==1)])))))
all_DEPs<-unique(union(multi_quant$dlfq,union(multi_quant$LFQ,union(multi_quant$top0,union(multi_quant$top3,multi_quant$count)))))
all_DEPs<-unique(c(T_DEPs, all_DEPs))
DEPs<-data.frame(dlfq=rep(0, length(all_DEPs)))
DEPs$dlfq[match(multi_quant$dlfq, all_DEPs)]=1
DEPs$LFQ=rep(0, length(all_DEPs))
DEPs$LFQ[match(multi_quant$LFQ, all_DEPs)]=1
DEPs$top0=rep(0, length(all_DEPs))
DEPs$top0[match(multi_quant$top0, all_DEPs)]=1
DEPs$top3=rep(0, length(all_DEPs))
DEPs$top3[match(multi_quant$top3, all_DEPs)]=1
DEPs$count=rep(0, length(all_DEPs))
DEPs$count[match(multi_quant$count, all_DEPs)]=1
DEPs$T_DEP=rep(0, length(T_DEPs))
DEPs$T_DEP[match(T_DEPs, all_DEPs)]=1
UpSetR::upset(DEPs,
sets = c("dlfq", "LFQ", "top0", "top3", "count", 'T_DEP'),
order.by="freq", matrix.color="black", point.size=3,
sets.bar.color=c("#15d08a","#f2ca01","#a45ee3","#c3642c",
"#f078b4"),mb.ratio=c(0.7, 0.3), text.scale = 1.5,
number.angles =-45)
T_DEPs<-unique(union(top1_dlfq$protein[which(top1_dlfq$label==1)],
union(top1_lfq$protein[which(top1_lfq$label==1)],
union(top1_top0$protein[which(top1_top0$label==1)],
union(top1_top3$protein[which(top1_top3$label==1)],
top1_count$protein[which(top1_count$label==1)])))))
all_DEPs<-unique(union(multi_quant$dlfq,union(multi_quant$LFQ,union(multi_quant$top0,union(multi_quant$top3,multi_quant$count)))))
all_DEPs<-unique(c(T_DEPs, all_DEPs))
DEPs<-data.frame(dlfq=rep(0, length(all_DEPs)))
DEPs$dlfq[match(multi_quant$dlfq, all_DEPs)]=1
DEPs$LFQ=rep(0, length(all_DEPs))
DEPs$LFQ[match(multi_quant$LFQ, all_DEPs)]=1
DEPs$top0=rep(0, length(all_DEPs))
DEPs$top0[match(multi_quant$top0, all_DEPs)]=1
DEPs$top3=rep(0, length(all_DEPs))
DEPs$top3[match(multi_quant$top3, all_DEPs)]=1
DEPs$count=rep(0, length(all_DEPs))
DEPs$count[match(multi_quant$count, all_DEPs)]=1
DEPs$T_DEP=rep(0, length(all_DEPs))
DEPs$T_DEP[match(T_DEPs, all_DEPs)]=1
UpSetR::upset(DEPs,
sets = c("dlfq", "LFQ", "top0", "top3", "count", 'T_DEP'),
order.by="freq", matrix.color="black", point.size=3,
sets.bar.color=c("#15d08a","#f2ca01","#a45ee3","#c3642c",
"#f078b4"),mb.ratio=c(0.7, 0.3), text.scale = 1.5,
number.angles =-45)
UpSetR::upset(DEPs,
sets = c("dlfq", "LFQ", "top0", "top3", "count", 'T_DEP'),
order.by="freq", matrix.color="black", point.size=3,
sets.bar.color=c("#15d08a","#f2ca01","#a45ee3","#c3642c","gray"
"#f078b4"),mb.ratio=c(0.7, 0.3), text.scale = 1.5,
UpSetR::upset(DEPs,
sets = c("dlfq", "LFQ", "top0", "top3", "count", 'T_DEP'),
order.by="freq", matrix.color="black", point.size=3,
sets.bar.color=c("#15d08a","#f2ca01","#a45ee3","#c3642c","gray",
"#f078b4"),mb.ratio=c(0.7, 0.3), text.scale = 1.5,
number.angles =-45)
top_quant<-list(Top1=top1$protein[which(abs(top1$logFC)>=log2(1.5) & top1$adj.pvalue<=0.05)],
Top2=top2$protein[which(abs(top2$logFC)>=log2(1.5) & top2$adj.pvalue<=0.05)],
Top3=top3$protein[which(abs(top3$logFC)>=log2(1.5) & top3$adj.pvalue<=0.05)],
Top4=top4$protein[which(abs(top4$logFC)>=log2(1.5) & top4$adj.pvalue<=0.05)],
Top5=top5$protein[which(abs(top5$logFC)>=log2(1.5) & top5$adj.pvalue<=0.05)])
library(UpSetR)
T_DEPs<-unique(union(top1$protein[which(top1$label==1)],
union(top2$protein[which(top2$label==1)],
union(top3$protein[which(top3$label==1)],
union(top4$protein[which(top4$label==1)],
top5$protein[which(top5$label==1)])))))
all_DEPs<-unique(union(top_quant$Top1,union(top_quant$Top2,union(top_quant$Top3,
union(top_quant$Top4,
top_quant$Top5)))))
all_DEPs<-unique(c(T_DEPs, all_DEPs))
DEPs<-data.frame(Top1=rep(0, length(all_DEPs)))
DEPs$Top1[match(top_quant$Top1, all_DEPs)]=1
DEPs$Top2=rep(0, length(all_DEPs))
DEPs$Top2[match(top_quant$Top2, all_DEPs)]=1
DEPs$Top3=rep(0, length(all_DEPs))
DEPs$Top3[match(top_quant$Top3, all_DEPs)]=1
DEPs$Top4=rep(0, length(all_DEPs))
DEPs$Top4[match(top_quant$Top4, all_DEPs)]=1
DEPs$Top5=rep(0, length(all_DEPs))
DEPs$Top5[match(top_quant$Top5, all_DEPs)]=1
DEPs$T_DEP=rep(0, length(all_DEPs))
DEPs$T_DEP[match(T_DEPs, all_DEPs)]=1
UpSetR::upset(DEPs,
sets = c("dlfq", "LFQ", "top0", "top3", "count", 'T_DEP'),
order.by="freq", matrix.color="black", point.size=3,
sets.bar.color=c("#15d08a","#f2ca01","#a45ee3","#c3642c","gray",
"#f078b4"),mb.ratio=c(0.7, 0.3), text.scale = 1.5,
number.angles =-45)
UpSetR::upset(DEPs,
sets = c("Top1", "Top2", "Top3", "Top4", "Top5", 'T_DEP'),
order.by="freq", matrix.color="black", point.size=3,
sets.bar.color=c("#15d08a","#f2ca01","#a45ee3","#c3642c","gray",
"#f078b4"),mb.ratio=c(0.7, 0.3), text.scale = 1.5,
number.angles =-45)
T_DEPs<-unique(union(top1_dlfq$protein[which(top1_dlfq$label==1)],
union(top1_lfq$protein[which(top1_lfq$label==1)],
union(top1_top0$protein[which(top1_top0$label==1)],
union(top1_top3$protein[which(top1_top3$label==1)],
top1_count$protein[which(top1_count$label==1)])))))
OpDEA::run_app()
devtools::build(path = "E:\OpDEA")
devtools::build(path = "E:/OpDEA")
devtools::build(path = "E:/OpDEA")
devtools::build(path = "E:/OpDEA")
devtools::build(path = "E:/OpDEA")
system.file
devtools::build(path = "E:/OpDEA")
devtools::build(path = "E:/OpDEA")
remove.packages('OpDEA')
install.packages(
pkgs = 'E:/OpDEA/OpDEA_0.0.0.9000.tar.gz',
lib = .libPaths()[length(.libPaths())],
repos = NULL, # 这个参数一定要的
dependencies = T
)
OpDEA::run_app()
