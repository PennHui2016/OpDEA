union(top1_top3$protein[which(top1_top3$label==1)],
top1_count$protein[which(top1_count$label==1)])))))
OpDEA::run_app()
devtools::build(path = "E:\OpDEA")
devtools::build(path = "E:/OpDEA")
devtools::build(path = "E:/OpDEA")
devtools::build(path = "E:/OpDEA")
devtools::build(path = "E:/OpDEA")
system.file
devtools::build(path = "E:/OpDEA")
devtools::build(path = "E:/OpDEA")
remove.packages('OpDEA')
install.packages(
pkgs = 'E:/OpDEA/OpDEA_0.0.0.9000.tar.gz',
lib = .libPaths()[length(.libPaths())],
repos = NULL, # 这个参数一定要的
dependencies = T
)
OpDEA::run_app()
library(OpDEA)
run_app()
remove.packages('OpDEA')
libaray('OpDEA')
library(shinydashboard)
library(shiny)
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
library(golem)
source("./R/plot_figures.R")
source('./R/tabs_contents.R')
source("./R/Data_access.R")
source("./R/helps.R")
source("./R/suggestions.R")
source('./R/response_suggest.R')
source('./R/app_server.R')
source('./R/app_ui.R')
source('./R/run_DEA_single.R')
source('./R/preprocessing_pro_counts.R')
source('./R/preprocessing_pro_intensity.R')
source('./R/preprocessing_pro_intensity_DEqMS.R')
source('./R/preprocessing_pro_intensity_DEqMS.R')
source('./R/run_DEA_single.R')
source('./R/run_DEA_ens.R')
source('./R/iq-fast_MOD.R')
library(iq)
source('./R/limma_DE.R')
source('./R/ROTS_DE.R')
source('./R/DEP_DE.R')
source('./R/proDA_DE.R')
source('./R/DEqMS_DE.R')
source('./R/plgem_DE.R')
source('./R/edgeR_DE.R')
source('./R/beta_binomial_DE.R')
source('./R/ANOVA_DE.R')
source('./R/SAM_DE.R')
source('./R/ttest_DE.R')
source('./R/MSstats_DE.R')
source('./R/ensemble.R')
#source('./R/app_config.R')
#addResourcePath('img', 'app/img')
addResourcePath('img', 'inst/app/img')
#addResourcePath('www', 'app/www')
#addResourcePath('root_fold', 'inst/app/root_fold')
add_resource_path(
"www",
app_sys("app/www")
)
library(shinydashboard)
library(shiny)
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
library(golem)
source("./R/plot_figures.R")
source('./R/tabs_contents.R')
source("./R/Data_access.R")
source("./R/helps.R")
source("./R/suggestions.R")
source('./R/response_suggest.R')
source('./R/app_server.R')
source('./R/app_ui.R')
source('./R/run_DEA_single.R')
source('./R/preprocessing_pro_counts.R')
source('./R/preprocessing_pro_intensity.R')
source('./R/preprocessing_pro_intensity_DEqMS.R')
source('./R/preprocessing_pro_intensity_DEqMS.R')
source('./R/run_DEA_single.R')
source('./R/run_DEA_ens.R')
source('./R/iq-fast_MOD.R')
library(iq)
source('./R/limma_DE.R')
source('./R/ROTS_DE.R')
source('./R/DEP_DE.R')
source('./R/proDA_DE.R')
source('./R/DEqMS_DE.R')
source('./R/plgem_DE.R')
source('./R/edgeR_DE.R')
source('./R/beta_binomial_DE.R')
source('./R/ANOVA_DE.R')
source('./R/SAM_DE.R')
source('./R/ttest_DE.R')
source('./R/MSstats_DE.R')
source('./R/ensemble.R')
#source('./R/app_config.R')
#addResourcePath('img', 'app/img')
addResourcePath('img', 'inst/app/img')
#addResourcePath('www', 'app/www')
#addResourcePath('root_fold', 'inst/app/root_fold')
# add_resource_path(
#   "www",
#   app_sys("app/www")
# )
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
run_app()
run_app()
source("E:/proteomics/maus2/submission_NC/revision2/submission/final/upload/OpDEA/OpDEA-main/R/run_app.R")
run_app()
source("E:/proteomics/maus2/submission_NC/revision2/submission/final/upload/OpDEA/OpDEA-main/R/run_app.R")
debugSource("E:/proteomics/maus2/submission_NC/revision2/submission/final/upload/OpDEA/OpDEA-main/R/run_app.R")
runApp('R/test.R')
library(shinydashboard)
library(shiny)
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
library(golem)
source("./R/plot_figures.R")
source('./R/tabs_contents.R')
source("./R/Data_access.R")
source("./R/helps.R")
source("./R/suggestions.R")
source('./R/response_suggest.R')
source('./R/app_server.R')
source('./R/app_ui.R')
source('./R/run_DEA_single.R')
source('./R/preprocessing_pro_counts.R')
source('./R/preprocessing_pro_intensity.R')
source('./R/preprocessing_pro_intensity_DEqMS.R')
source('./R/preprocessing_pro_intensity_DEqMS.R')
source('./R/run_DEA_single.R')
source('./R/run_DEA_ens.R')
source('./R/iq-fast_MOD.R')
library(iq)
source('./R/limma_DE.R')
source('./R/ROTS_DE.R')
source('./R/DEP_DE.R')
source('./R/proDA_DE.R')
source('./R/DEqMS_DE.R')
source('./R/plgem_DE.R')
source('./R/edgeR_DE.R')
source('./R/beta_binomial_DE.R')
source('./R/ANOVA_DE.R')
source('./R/SAM_DE.R')
source('./R/ttest_DE.R')
source('./R/MSstats_DE.R')
source('./R/ensemble.R')
#source('./R/app_config.R')
#addResourcePath('img', 'app/img')
addResourcePath('img', 'inst/app/img')
#addResourcePath('www', 'app/www')
#addResourcePath('root_fold', 'inst/app/root_fold')
# add_resource_path(
#   "www",
#   app_sys("app/www")
# )
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
run_app()
View(ens_sug_mq)
ens_sug_mq[["wfs"]]
View(mats)
a=mats$exp_mat
View(a)
View(counts)
run_app()
View(intens)
View(counts)
View(prepro_res)
View(count)
Q
run_app()
Q
run_app()
library(shinydashboard)
library(shiny)
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
library(golem)
source("./R/plot_figures.R")
source('./R/tabs_contents.R')
source("./R/Data_access.R")
source("./R/helps.R")
source("./R/suggestions.R")
source('./R/response_suggest.R')
source('./R/app_server.R')
source('./R/app_ui.R')
source('./R/run_DEA_single.R')
source('./R/preprocessing_pro_counts.R')
source('./R/preprocessing_pro_intensity.R')
source('./R/preprocessing_pro_intensity_DEqMS.R')
source('./R/preprocessing_pro_intensity_DEqMS.R')
source('./R/run_DEA_single.R')
source('./R/run_DEA_ens.R')
source('./R/iq-fast_MOD.R')
library(iq)
source('./R/limma_DE.R')
source('./R/ROTS_DE.R')
source('./R/DEP_DE.R')
source('./R/proDA_DE.R')
source('./R/DEqMS_DE.R')
source('./R/plgem_DE.R')
source('./R/edgeR_DE.R')
source('./R/beta_binomial_DE.R')
source('./R/ANOVA_DE.R')
source('./R/SAM_DE.R')
source('./R/ttest_DE.R')
source('./R/MSstats_DE.R')
source('./R/ensemble.R')
#source('./R/app_config.R')
#addResourcePath('img', 'app/img')
addResourcePath('img', 'inst/app/img')
#addResourcePath('www', 'app/www')
#addResourcePath('root_fold', 'inst/app/root_fold')
# add_resource_path(
#   "www",
#   app_sys("app/www")
# )
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
run_app()
run_app()
library(shinydashboard)
library(shiny)
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
library(golem)
source("./R/plot_figures.R")
source('./R/tabs_contents.R')
source("./R/Data_access.R")
source("./R/helps.R")
source("./R/suggestions.R")
source('./R/response_suggest.R')
source('./R/app_server.R')
source('./R/app_ui.R')
source('./R/run_DEA_single.R')
source('./R/preprocessing_pro_counts.R')
source('./R/preprocessing_pro_intensity.R')
source('./R/preprocessing_pro_intensity_DEqMS.R')
source('./R/preprocessing_pro_intensity_DEqMS.R')
source('./R/run_DEA_single.R')
source('./R/run_DEA_ens.R')
source('./R/iq-fast_MOD.R')
library(iq)
source('./R/limma_DE.R')
source('./R/ROTS_DE.R')
source('./R/DEP_DE.R')
source('./R/proDA_DE.R')
source('./R/DEqMS_DE.R')
source('./R/plgem_DE.R')
source('./R/edgeR_DE.R')
source('./R/beta_binomial_DE.R')
source('./R/ANOVA_DE.R')
source('./R/SAM_DE.R')
source('./R/ttest_DE.R')
source('./R/MSstats_DE.R')
source('./R/ensemble.R')
#source('./R/app_config.R')
#addResourcePath('img', 'app/img')
addResourcePath('img', 'inst/app/img')
#addResourcePath('www', 'app/www')
#addResourcePath('root_fold', 'inst/app/root_fold')
# add_resource_path(
#   "www",
#   app_sys("app/www")
# )
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
run_app()
View(tab)
View(out_data)
View(out_exp)
library(shinydashboard)
library(shiny)
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
library(golem)
source("./R/plot_figures.R")
source('./R/tabs_contents.R')
source("./R/Data_access.R")
source("./R/helps.R")
source("./R/suggestions.R")
source('./R/response_suggest.R')
source('./R/app_server.R')
source('./R/app_ui.R')
source('./R/run_DEA_single.R')
source('./R/preprocessing_pro_counts.R')
source('./R/preprocessing_pro_intensity.R')
source('./R/preprocessing_pro_intensity_DEqMS.R')
source('./R/preprocessing_pro_intensity_DEqMS.R')
source('./R/run_DEA_single.R')
source('./R/run_DEA_ens.R')
source('./R/iq-fast_MOD.R')
library(iq)
source('./R/limma_DE.R')
source('./R/ROTS_DE.R')
source('./R/DEP_DE.R')
source('./R/proDA_DE.R')
source('./R/DEqMS_DE.R')
source('./R/plgem_DE.R')
source('./R/edgeR_DE.R')
source('./R/beta_binomial_DE.R')
source('./R/ANOVA_DE.R')
source('./R/SAM_DE.R')
source('./R/ttest_DE.R')
source('./R/MSstats_DE.R')
source('./R/ensemble.R')
#source('./R/app_config.R')
#addResourcePath('img', 'app/img')
addResourcePath('img', 'inst/app/img')
#addResourcePath('www', 'app/www')
#addResourcePath('root_fold', 'inst/app/root_fold')
# add_resource_path(
#   "www",
#   app_sys("app/www")
# )
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
run_app()
dlfq_path
library(devtools)
devtools::build(path = "E:/proteomics/maus2/submission_NC/revision2/submission/final/upload/OpDEA/OpDEA-main/")
library(devtools)
devtools::build(path = "E:/proteomics/maus2/submission_NC/revision2/submission/final/upload/OpDEA/OpDEA-main/")
install.packages(
pkgs = 'E:/proteomics/maus2/submission_NC/revision2/submission/final/upload/OpDEA/OpDEA-main/OpDEA_0.0.0.9000.tar.gz',
lib = .libPaths()[length(.libPaths())],
repos = NULL, # 这个参数一定要的
dependencies = T
)
devtools::build(path = "E:/proteomics/maus2/submission_NC/revision2/submission/final/upload/OpDEA/OpDEA-main/")
install.packages(
pkgs = 'E:/proteomics/maus2/submission_NC/revision2/submission/final/upload/OpDEA/OpDEA-main/OpDEA_0.0.0.9000.tar.gz',
lib = .libPaths()[length(.libPaths())],
repos = NULL, # 这个参数一定要的
dependencies = T
)
devtools::build(path = "E:/proteomics/maus2/submission_NC/revision2/submission/final/upload/OpDEA/OpDEA-main/")
install.packages(
pkgs = 'E:/proteomics/maus2/submission_NC/revision2/submission/final/upload/OpDEA/OpDEA-main/OpDEA_0.0.0.9000.tar.gz',
lib = .libPaths()[length(.libPaths())],
repos = NULL, # 这个参数一定要的
dependencies = T
)
library('devtools')
install.packages(
+     pkgs = 'E:/proteomics/maus2/submission_NC/revision2/submission/final/upload/OpDEA/OpDEA-main/OpDEA_0.0.0.9000.tar.gz',
devtools::build(path = "E:/proteomics/maus2/submission_NC/revision2/submission/final/upload/OpDEA/OpDEA-main/")
install.packages(
pkgs = "E:/proteomics/maus2/submission_NC/revision2/submission/final/upload/OpDEA/OpDEA-main//OpDEA_0.0.0.9000.tar.gz",
lib = .libPaths()[length(.libPaths())],
repos = NULL, # 这个参数一定要的
dependencies = T
)
OpDEA::run_app()
OpDEA::run_app()
OpDEA::run_app()
remove.packages('OpDEA')
devtools::build(path = "E:/proteomics/maus2/submission_NC/revision2/submission/final/upload/OpDEA/OpDEA-main/")
install.packages(
pkgs = "E:/proteomics/maus2/submission_NC/revision2/submission/final/upload/OpDEA/OpDEA-main//OpDEA_0.0.0.9000.tar.gz",
lib = .libPaths()[length(.libPaths())],
repos = NULL, # 这个参数一定要的
dependencies = T
)
OpDEA::run_app()
OpDEA::run_app()
remove.packages('OpDEA')
library(OpDEA)
devtools::build(path = "E:/proteomics/maus2/submission_NC/revision2/submission/final/upload/OpDEA/OpDEA-main/")
install.packages(
pkgs = "E:/proteomics/maus2/submission_NC/revision2/submission/final/upload/OpDEA/OpDEA-main//OpDEA_0.0.0.9000.tar.gz",
lib = .libPaths()[length(.libPaths())],
repos = NULL, # 这个参数一定要的
dependencies = T
)
OpDEA::run_app()
